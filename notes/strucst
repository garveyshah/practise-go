        STRUCS
- are used to define custom data types that represent a collection of fields.
- are particularly useful for organizing related data into a single unit.

	APPLICATION AREAS
1. Modelling real-world entities:
> structs can be used to model real world entities such as people, cars, books, etC, Each field in the struc corresponds to a characteristic or attribute of the entity. For example, a 'Person' struct might have fields like 'name', 'age', 'address', etc .
2. Data Structures:
> structs are frequently used to implement various data structures like linked lists, trees, queues, stack, graphs, etc.. Each node or element in the data structure can be used  represented by a struct, with fields representing data and references to other elements.
3. Configuration Objects:
> Structs can be used to define configuration objects that hold various settings or parameters for an application or system. Each field in the struct represents a different configuraion option.
4. API Responses (Application Programming Interface- A set of rules and protocals that allows different software applications to communicatw with each other/ define how software components should intract, including what data can be accessed and what actions can be performed.):
> When working with APIs, structs are often used to represent the structure of the data being sent or received. For example you might define a struct to represent the JSON response from an API endpoint.
5. Database Records: 
> In database-Driven applications , strucs are commonly used to represent rows in database tables. Each field in the struct represents a column in the in the table.
6. Function Parameters and Return Types: 
> Structs can be used to group related parameters and return values in function signatures. This can help improve code readability and maintainabilty, especially when dealing with complex functions.

Overall, structs are a fundamental building block in Go Programming, providing a way to define custom data types and organize date effectively. They are used across a wide range of applications and scenerios to represent and manipulate data in a structured manner. 

1.Basics Structs: 
-A struct in Go is a composite datatype that groups    together zero or more fields of any type under a single name.
-Structa are declared using the 'type' keword followed by the struct name and a list of fields enclosed in curly braces '{}'
eg. 
        type person struct {
                Name string 
                Age int
        }

2.Inisilizing Structs:
- Struct variables are initialized using the struct literal syntax , where you provide values for each field in the order they are declared.
e.g 
        person := Person{Name: "Alice". Age: 30}

3.Accessing Structs Fields:
-Struct field are accessed using the dot '.' notation followed by the field name.
-Struct field can be modified directly if the struct variable is mutable.
e.g

        fmt.Println(person.Name) // Accessing Field
        person.Age = 31 // Modifying field

4. Nested Structs:
- A nested struct is a struct that is a field of another struct.
- Nested structs are declared and initialied similarly to regular structs.
e.g 
        type Address struct {
                city    string
                country string
        }

        type Person struct {
                Name    string
                Age     int
                Address Address
        } 

        person := Person{Nmae: "John", Age: 25, Address: Address{City: "New York", Country: "USA"}}

5. Anonymous Struts: 
- An anonymous struct is a struct without a specified name.
- Anonymous structs are declared and initialized using the struct syntact without specifying a name.
e.g 
        details := struct {
                Name string
                Age int
        }{Nmae: "Bob", Age: 35}

6. Struct Methods:
- Struct methods are functions associated with a particular struct type.
- They are defined using the 'func' keyword followed by the receiver type in parentheses before the function name.
e.g 
        func (p Person) Greet() {
                fmt.Println("Hello, my name is", p.Name)
        }

7. Pointer Receiver Methods:
- Pointers receiver methods have a pointer type receiver, allowing them to to modify the struct directly.
- They are define similarly to regulary methods but with a pointer receiver type.
e.g
        func (p *Person) UpdateAge(newAge int) {
                p.Age = newAge
        }

8. Embedded Structs:
- Embedded structs allow a struct to include another struct as as one of its fields.
- The fields of the embedded struc can be accessed directly from the outer struct.
